/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserListArgs } from "./CreateUserListArgs";
import { UpdateUserListArgs } from "./UpdateUserListArgs";
import { DeleteUserListArgs } from "./DeleteUserListArgs";
import { UserListCountArgs } from "./UserListCountArgs";
import { UserListFindManyArgs } from "./UserListFindManyArgs";
import { UserListFindUniqueArgs } from "./UserListFindUniqueArgs";
import { UserList } from "./UserList";
import { UserListService } from "../userList.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserList)
export class UserListResolverBase {
  constructor(
    protected readonly service: UserListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserList",
    action: "read",
    possession: "any",
  })
  async _userListsMeta(
    @graphql.Args() args: UserListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserList])
  @nestAccessControl.UseRoles({
    resource: "UserList",
    action: "read",
    possession: "any",
  })
  async userLists(
    @graphql.Args() args: UserListFindManyArgs
  ): Promise<UserList[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserList, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserList",
    action: "read",
    possession: "own",
  })
  async userList(
    @graphql.Args() args: UserListFindUniqueArgs
  ): Promise<UserList | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserList)
  @nestAccessControl.UseRoles({
    resource: "UserList",
    action: "create",
    possession: "any",
  })
  async createUserList(
    @graphql.Args() args: CreateUserListArgs
  ): Promise<UserList> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserList)
  @nestAccessControl.UseRoles({
    resource: "UserList",
    action: "update",
    possession: "any",
  })
  async updateUserList(
    @graphql.Args() args: UpdateUserListArgs
  ): Promise<UserList | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserList)
  @nestAccessControl.UseRoles({
    resource: "UserList",
    action: "delete",
    possession: "any",
  })
  async deleteUserList(
    @graphql.Args() args: DeleteUserListArgs
  ): Promise<UserList | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
